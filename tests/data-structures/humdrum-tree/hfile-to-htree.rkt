#lang racket

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hum-parser: tests for hfile->htree
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require "../../../parser/data-definitions/data-definitions.rkt"
         (only-in "../../../parser/functions/file.rkt" path->hfile)
         "../../../data-structures/humdrum-tree/data-definitions/data-definitions.rkt"
         (only-in "../../../data-structures/humdrum-tree/functions/hfile-to-htree.rkt" hfile->htree)
         test-engine/racket-tests)

(define one-spine-no-splits    "../data/one-spine-no-splits.krn")
(define one-spine-one-split    "../data/one-spine-one-split.krn")
(define one-spine-two-splits   "../data/one-spine-two-splits.krn")
(define two-spines-no-splits   "../data/two-spines-no-splits.krn")
(define two-spines-one-splits  "../data/two-spines-one-splits.krn")
(define two-spines-both-split  "../data/two-spines-both-split.krn")

(define one-spine-no-splits-hfile    (path->hfile one-spine-no-splits))
(define one-spine-one-split-hfile    (path->hfile one-spine-one-split))
(define one-spine-two-splits-hfile   (path->hfile one-spine-two-splits))
(define two-spines-no-splits-hfile   (path->hfile two-spines-no-splits))
(define two-spines-one-splits-hfile  (path->hfile two-spines-one-splits))
(define two-spines-both-split-hfile  (path->hfile two-spines-both-split))

; hfile->htree
(check-expect (hfile->htree one-spine-no-splits-hfile)
              (htree
                (root (list
                        (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0)
                          (leaf (token "*clefG2" CLEF 1)
                            (leaf (token "*k[]" KEY-SIG 2)
                              (leaf (token "*a:" KEY-LABEL 3)
                                (leaf (token "*M1/4" TIME-SIG 4)
                                  (leaf (token "4a" SPINE-DATA 5)
                                    (leaf (token "=2" MEASURE 6)
                                      (leaf (token "4b" SPINE-DATA 7)
                                        (leaf (token "=3" MEASURE 8)
                                          (leaf (token "4a" SPINE-DATA 9)
                                            (leaf (token "==" MEASURE 10)
                                              (leaf (token "*-" SPINE-TERMINATOR 11)
                                                    #f))))))))))))))))
(check-expect (hfile->htree one-spine-one-split-hfile)
              (htree
                (root (list
                        (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0)
                          (leaf (token "*clefG2" CLEF 1)
                            (leaf (token "*k[]" KEY-SIG 2)
                              (leaf (token "*a:" KEY-LABEL 3)
                                (leaf (token "*M1/4" TIME-SIG 4)
                                  (leaf (token "4a" SPINE-DATA 5)
                                    (leaf (token "=2" MEASURE 6)
                                      (parent (token "*^" SPINE-SPLIT 7)
                                        (leaf (token "4b" SPINE-DATA 8)
                                          (leaf (token "=3" MEASURE 9)
                                            (leaf (token "4a" SPINE-DATA 10)
                                              (leaf (token "*v" SPINE-JOIN 11)
                                                (leaf (token "==" MEASURE 12)
                                                  (leaf (token "*-" SPINE-TERMINATOR 13)
                                                        #f))))))
                                        (leaf (token "4bb" SPINE-DATA 8)
                                          (leaf (token "=3" MEASURE 9)
                                            (leaf (token "4aa" SPINE-DATA 10)
                                              (leaf (token "*v" SPINE-JOIN 11)
                                                    #f))))))))))))))))
(check-expect (hfile->htree one-spine-two-splits-hfile)
              (htree
                (root (list
                        (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0)
                          (leaf (token "*clefG2" CLEF 1)
                            (leaf (token "*k[]" KEY-SIG 2)
                              (leaf (token "*a:" KEY-LABEL 3)
                                (leaf (token "*M1/4" TIME-SIG 4)
                                  (parent (token "*^" SPINE-SPLIT 5)
                                    (leaf (token "4a" SPINE-DATA 6)
                                      (leaf (token "=2" MEASURE 7)
                                        (leaf (token "*" NULL-INTERPRETATION 8)
                                          (leaf (token "4b" SPINE-DATA 9)
                                            (leaf (token "=3" MEASURE 10)
                                              (leaf (token "4a" SPINE-DATA 11)
                                                (leaf (token "*" NULL-INTERPRETATION 12)
                                                  (leaf (token "*v" SPINE-JOIN 13)
                                                    (leaf (token "==" MEASURE 14)
                                                      (leaf (token "*-" SPINE-TERMINATOR 15)
                                                            #f))))))))))
                                    (leaf (token "4aa" SPINE-DATA 6)
                                      (leaf (token "=2" MEASURE 7)
                                        (parent (token "*^" SPINE-SPLIT 8)
                                          (leaf (token "4bb" SPINE-DATA 9)
                                            (leaf (token "=3" MEASURE 10)
                                              (leaf (token "4aa" SPINE-DATA 11)
                                                (leaf (token "*v" SPINE-JOIN 12)
                                                  (leaf (token "*v" SPINE-JOIN 13)
                                                    (leaf (token "==" MEASURE 14)
                                                      (leaf (token "*-" SPINE-TERMINATOR 15)
                                                            #f)))))))
                                          (leaf (token "4bbb" SPINE-DATA 9)
                                            (leaf (token "=3" MEASURE 10)
                                              (leaf (token "4aaa" SPINE-DATA 11)
                                                (leaf (token "*v" SPINE-JOIN 12)
                                                      #f)))))))))))))))))
(check-expect (hfile->htree two-spines-no-splits-hfile)
              (htree
                (root (list
                  (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0)
                    (leaf (token "*clefG2" CLEF 1)
                      (leaf (token "*k[]" KEY-SIG 2)
                        (leaf (token "*a:" KEY-LABEL 3)
                          (leaf (token "*M1/4" TIME-SIG 4)
                            (leaf (token "4a" SPINE-DATA 5)
                              (leaf (token "=2" MEASURE 6)
                                (leaf (token "4b" SPINE-DATA 7)
                                  (leaf (token "=3" MEASURE 8)
                                    (leaf (token "4a" SPINE-DATA 9)
                                      (leaf (token "==" MEASURE 10)
                                        (leaf (token "*-" SPINE-TERMINATOR 11)
                                              #f))))))))))))
                  (leaf (token "**dynam" EXCLUSIVE-INTERPRETATION 0)
                    (leaf (token "*" NULL-INTERPRETATION 1)
                      (leaf (token "*" NULL-INTERPRETATION 2)
                        (leaf (token "*" NULL-INTERPRETATION 3)
                          (leaf (token "*" NULL-INTERPRETATION 4)
                            (leaf (token "p" SPINE-DATA 5)
                              (leaf (token "=2" MEASURE 6)
                                (leaf (token "f" SPINE-DATA 7)
                                  (leaf (token "=3" MEASURE 8)
                                    (leaf (token "." NULL-SPINE-DATA 9)
                                      (leaf (token "==" MEASURE 10)
                                        (leaf (token "*-" SPINE-TERMINATOR 11)
                                              #f))))))))))))))))
(check-expect (hfile->htree two-spines-one-splits-hfile)
              (htree
                (root (list
                  (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0)
                    (leaf (token "*clefG2" CLEF 1)
                      (leaf (token "*k[]" KEY-SIG 2)
                        (leaf (token "*a:" KEY-LABEL 3)
                          (leaf (token "*M1/4" TIME-SIG 4)
                            (leaf (token "4a" SPINE-DATA 5)
                              (leaf (token "=2" MEASURE 6)
                                (parent (token "*^" SPINE-SPLIT 7)
                                  (leaf (token "4b" SPINE-DATA 8)
                                    (leaf (token "=3" MEASURE 9)
                                      (leaf (token "4a" SPINE-DATA 10)
                                        (leaf (token "*v" SPINE-JOIN 11)
                                          (leaf (token "==" MEASURE 12)
                                            (leaf (token "*-" SPINE-TERMINATOR 13)
                                                  #f))))))
                                  (leaf (token "4bb" SPINE-DATA 8)
                                    (leaf (token "=3" MEASURE 9)
                                      (leaf (token "4aa" SPINE-DATA 10)
                                        (leaf (token "*v" SPINE-JOIN 11)
                                              #f))))))))))))
                  (leaf (token "**dynam" EXCLUSIVE-INTERPRETATION 0)
                    (leaf (token "*" NULL-INTERPRETATION 1)
                      (leaf (token "*" NULL-INTERPRETATION 2)
                        (leaf (token "*" NULL-INTERPRETATION 3)
                          (leaf (token "*" NULL-INTERPRETATION 4)
                            (leaf (token "p" SPINE-DATA 5)
                              (leaf (token "=2" MEASURE 6)
                                (leaf (token "*" NULL-INTERPRETATION 7)
                                (leaf (token "f" SPINE-DATA 8)
                                  (leaf (token "=3" MEASURE 9)
                                    (leaf (token "." NULL-SPINE-DATA 10)
                                      (leaf (token "*" NULL-INTERPRETATION 11)
                                        (leaf (token "==" MEASURE 12)
                                          (leaf (token "*-" SPINE-TERMINATOR 13)
                                                #f))))))))))))))))))
(check-expect (hfile->htree two-spines-both-split-hfile)
              (htree
                (root (list
                  (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0)
                    (leaf (token "*clefG2" CLEF 1)
                      (leaf (token "*k[]" KEY-SIG 2)
                        (leaf (token "*a:" KEY-LABEL 3)
                          (leaf (token "*M1/4" TIME-SIG 4)
                            (leaf (token "*" NULL-INTERPRETATION 5)
                              (leaf (token "4a" SPINE-DATA 6)
                                (leaf (token "=2" MEASURE 7)
                                  (parent (token "*^" SPINE-SPLIT 8)
                                    (leaf (token "4b" SPINE-DATA 9)
                                      (leaf (token "=3" MEASURE 10)
                                        (leaf (token "4a" SPINE-DATA 11)
                                          (leaf (token "*" NULL-INTERPRETATION 12)
                                            (leaf (token "*v" SPINE-JOIN 13)
                                              (leaf (token "==" MEASURE 14)
                                                (leaf (token "*-" SPINE-TERMINATOR 15)
                                                      #f)))))))
                                    (leaf (token "4bb" SPINE-DATA 9)
                                      (leaf (token "=3" MEASURE 10)
                                        (leaf (token "4aa" SPINE-DATA 11)
                                          (leaf (token "*" NULL-INTERPRETATION 12)
                                            (leaf (token "*v" SPINE-JOIN 13)
                                                  #f))))))))))))))
                  (leaf (token "**dynam" EXCLUSIVE-INTERPRETATION 0)
                    (leaf (token "*" NULL-INTERPRETATION 1)
                      (leaf (token "*" NULL-INTERPRETATION 2)
                        (leaf (token "*" NULL-INTERPRETATION 3)
                          (leaf (token "*" NULL-INTERPRETATION 4)
                            (parent (token "*^" SPINE-SPLIT 5)
                              (leaf (token "p" SPINE-DATA 6)
                                (leaf (token "=2" MEASURE 7)
                                  (leaf (token "*" NULL-INTERPRETATION 8)
                                    (leaf (token "f" SPINE-DATA 9)
                                      (leaf (token "=3" MEASURE 10)
                                        (leaf (token "." NULL-SPINE-DATA 11)
                                          (leaf (token "*v" SPINE-JOIN 12)
                                            (leaf (token "*" NULL-INTERPRETATION 13)
                                              (leaf (token "==" MEASURE 14)
                                                (leaf (token "*-" SPINE-TERMINATOR 15)
                                                      #f))))))))))
                              (leaf (token "pp" SPINE-DATA 6)
                                (leaf (token "=2" MEASURE 7)
                                  (leaf (token "*" NULL-INTERPRETATION 8)
                                    (leaf (token "ff" SPINE-DATA 9)
                                      (leaf (token "=3" MEASURE 10)
                                        (leaf (token "ff" SPINE-DATA 11)
                                          (leaf (token "*v" SPINE-JOIN 12)
                                                #f)))))))))))))))))

(test)
