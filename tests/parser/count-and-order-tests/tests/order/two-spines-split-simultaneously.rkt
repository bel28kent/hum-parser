#lang racket/base

(require "../../../../parser/data-definitions/data-definitions.rkt"
         "../../../../parser/functions/file.rkt"
         "../../../../parser/functions/spine-parser.rkt"
         "../../../../parser/data-structures/humdrum-graph/data-definitions/data-definitions.rkt"
         "../../../../parser/data-structures/humdrum-graph/functions/hgraph-to-hfile.rkt"
         "../../../../parser/data-structures/humdrum-graph/functions/hfile-to-hgraph.rkt"
         "../../../../parser/data-structures/linked-spine/data-definitions/data-definitions.rkt"
         "../../../../parser/data-structures/linked-spine/functions/gspines-to-linked-spines.rkt"
         test-engine/racket-tests)

;; Node definitions
(define TERM-7-0 (terminator-node (token "*-" SPINE-TERMINATOR 7 0)))
(define J-6-0 (token-node (token "*v" SPINE-JOIN 6 0) (box-immutable TERM-7-0)))
(define J-6-1 (token-node (token "*v" SPINE-JOIN 6 1) (box-immutable TERM-7-0)))
(define NULL-5-0 (token-node (token "*" NULL-INTERPRETATION 5 0) (box-immutable J-6-0)))
(define NULL-5-1 (token-node (token "*" NULL-INTERPRETATION 5 1) (box-immutable J-6-1)))
(define 4c-4-0 (token-node (token "4c" SPINE-DATA 4 0) (box-immutable NULL-5-0)))
(define 4c-4-1 (token-node (token "4c" SPINE-DATA 4 1) (box-immutable NULL-5-1)))
(define 4c-3-0 (token-node (token "4c" SPINE-DATA 3 0) (box-immutable 4c-4-0)))
(define 4c-3-1 (token-node (token "4c" SPINE-DATA 3 1) (box-immutable 4c-4-1)))
(define 4c-2-0 (token-node (token "4c" SPINE-DATA 2 0) (box-immutable 4c-3-0)))
(define 4c-2-1 (token-node (token "4c" SPINE-DATA 2 1) (box-immutable 4c-3-1)))
(define S-1-0 (split-node (token "*^" SPINE-SPLIT 1 0)
                          (box-immutable 4c-2-0)
                          (box-immutable 4c-2-1)))
(define KERN-0-0 (token-node (token "**kern" EXCLUSIVE-INTERPRETATION 0 0) (box-immutable S-1-0)))

(define TERM-7-1 (terminator-node (token "*-" SPINE-TERMINATOR 7 1)))
(define NULL-6-2 (token-node (token "*" NULL-INTERPRETATION 6 2) (box-immutable TERM-7-1)))
(define J-5-2 (token-node (token "*v" SPINE-JOIN 5 2) (box-immutable NULL-6-2)))
(define J-5-3 (token-node (token "*v" SPINE-JOIN 5 3) (box-immutable NULL-6-2)))
(define 4c-4-2 (token-node (token "4c" SPINE-DATA 4 2) (box-immutable J-5-2)))
(define 4c-4-3 (token-node (token "4c" SPINE-DATA 4 3) (box-immutable J-5-3)))
(define 4c-3-2 (token-node (token "4c" SPINE-DATA 3 2) (box-immutable 4c-4-2)))
(define 4c-3-3 (token-node (token "4c" SPINE-DATA 3 3) (box-immutable 4c-4-3)))
(define 4c-2-2 (token-node (token "4c" SPINE-DATA 2 2) (box-immutable 4c-3-2)))
(define 4c-2-3 (token-node (token "4c" SPINE-DATA 2 3) (box-immutable 4c-3-3)))
(define S-1-1 (split-node (token "*^" SPINE-SPLIT 1 1)
                          (box-immutable 4c-2-2)
                          (box-immutable 4c-2-3)))
(define KERN-0-1 (token-node (token "**kern" EXCLUSIVE-INTERPRETATION 0 1) (box-immutable S-1-1)))

(check-expect (path->hfile "../../data/order/two-spines-split-simultaneously.krn")
              (hfile (list (record "**kern\t**kern" TOKEN
                                   (list (token "**kern" EXCLUSIVE-INTERPRETATION 0 0)
                                         (token "**kern" EXCLUSIVE-INTERPRETATION 0 1))
                                   0)
                           (record "*^\t*^" TOKEN
                                   (list (token "*^" SPINE-SPLIT 1 0)
                                         (token "*^" SPINE-SPLIT 1 1))
                                   1)
                           (record "4c\t4c\t4c\t4c" TOKEN
                                   (list (token "4c" SPINE-DATA 2 0)
                                         (token "4c" SPINE-DATA 2 1)
                                         (token "4c" SPINE-DATA 2 2)
                                         (token "4c" SPINE-DATA 2 3))
                                   2)
                           (record "4c\t4c\t4c\t4c" TOKEN
                                   (list (token "4c" SPINE-DATA 3 0)
                                         (token "4c" SPINE-DATA 3 1)
                                         (token "4c" SPINE-DATA 3 2)
                                         (token "4c" SPINE-DATA 3 3))
                                   3)
                           (record "4c\t4c\t4c\t4c" TOKEN
                                   (list (token "4c" SPINE-DATA 4 0)
                                         (token "4c" SPINE-DATA 4 1)
                                         (token "4c" SPINE-DATA 4 2)
                                         (token "4c" SPINE-DATA 4 3))
                                   4)
                           (record "*\t*\t*v\t*v" TOKEN
                                   (list (token "*" NULL-INTERPRETATION 5 0)
                                         (token "*" NULL-INTERPRETATION 5 1)
                                         (token "*v" SPINE-JOIN 5 2)
                                         (token "*v" SPINE-JOIN 5 3))
                                   5)
                           (record "*v\t*v\t*" TOKEN
                                   (list (token "*v" SPINE-JOIN 6 0)
                                         (token "*v" SPINE-JOIN 6 1)
                                         (token "*" NULL-INTERPRETATION 6 2))
                                   6)
                           (record "*-\t*-" TOKEN
                                   (list (token "*-" SPINE-TERMINATOR 7 0)
                                         (token "*-" SPINE-TERMINATOR 7 1))
                                   7))))
(check-expect (spine-parser (path->hfile "../../data/order/two-spines-split-simultaneously.krn"))
              (list (global-spine KERN
                                  (list (list (token "**kern" EXCLUSIVE-INTERPRETATION 0 0))
                                        (list (token "*^" SPINE-SPLIT 1 0))
                                        (list (token "4c" SPINE-DATA 2 0)
                                              (token "4c" SPINE-DATA 2 1))
                                        (list (token "4c" SPINE-DATA 3 0)
                                              (token "4c" SPINE-DATA 3 1))
                                        (list (token "4c" SPINE-DATA 4 0)
                                              (token "4c" SPINE-DATA 4 1))
                                        (list (token "*" NULL-INTERPRETATION 5 0)
                                              (token "*" NULL-INTERPRETATION 5 1))
                                        (list (token "*v" SPINE-JOIN 6 0)
                                              (token "*v" SPINE-JOIN 6 1))
                                        (list (token "*-" SPINE-TERMINATOR 7 0)))
                                  0)
                    (global-spine KERN
                                  (list (list (token "**kern" EXCLUSIVE-INTERPRETATION 0 1))
                                        (list (token "*^" SPINE-SPLIT 1 1))
                                        (list (token "4c" SPINE-DATA 2 2)
                                              (token "4c" SPINE-DATA 2 3))
                                        (list (token "4c" SPINE-DATA 3 2)
                                              (token "4c" SPINE-DATA 3 3))
                                        (list (token "4c" SPINE-DATA 4 2)
                                              (token "4c" SPINE-DATA 4 3))
                                        (list (token "*v" SPINE-JOIN 5 2)
                                              (token "*v" SPINE-JOIN 5 3))
                                        (list (token "*" NULL-INTERPRETATION 6 2))
                                        (list (token "*-" SPINE-TERMINATOR 7 1)))
                                  1)))
(check-expect (hgraph->hfile
               (hgraph (root (list (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0 0))
                                         (parent (token "*^" SPINE-SPLIT 1 0)
                                                 (list (leaf (token "4c" SPINE-DATA 2 0))
                                                       (leaf (token "4c" SPINE-DATA 3 0))
                                                       (leaf (token "4c" SPINE-DATA 4 0))
                                                       (leaf (token "*" NULL-INTERPRETATION 5 0))
                                                       (leaf (token "*v" SPINE-JOIN 6 0)))
                                                 (list (leaf (token "4c" SPINE-DATA 2 1))
                                                       (leaf (token "4c" SPINE-DATA 3 1))
                                                       (leaf (token "4c" SPINE-DATA 4 1))
                                                       (leaf (token "*" NULL-INTERPRETATION 5 1))
                                                       (leaf (token "*v" SPINE-JOIN 6 1))))
                                         (leaf (token "*-" SPINE-TERMINATOR 7 0)))
                                   (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0 1))
                                         (parent (token "*^" SPINE-SPLIT 1 0)
                                                 (list (leaf (token "4c" SPINE-DATA 2 2))
                                                       (leaf (token "4c" SPINE-DATA 3 2))
                                                       (leaf (token "4c" SPINE-DATA 4 2))
                                                       (leaf (token "*v" SPINE-JOIN 5 2)))
                                                 (list (leaf (token "4c" SPINE-DATA 2 3))
                                                       (leaf (token "4c" SPINE-DATA 3 3))
                                                       (leaf (token "4c" SPINE-DATA 4 3))
                                                       (leaf (token "*v" SPINE-JOIN 5 3))))
                                         (leaf (token "*" NULL-INTERPRETATION 6 2))
                                         (leaf (token "*-" SPINE-TERMINATOR 7 1)))))))
              (path->hfile "../../data/order/two-spines-split-simultaneously.krn"))
(check-expect (lolot->lor (list (list (token "**kern" EXCLUSIVE-INTERPRETATION 0 0)
                                      (token "**kern" EXCLUSIVE-INTERPRETATION 0 1))
                                (list (token "*^" SPINE-SPLIT 1 0)
                                      (token "*^" SPINE-SPLIT 1 1))
                                (list (token "4c" SPINE-DATA 2 0)
                                      (token "4c" SPINE-DATA 2 1)
                                      (token "4c" SPINE-DATA 2 2)
                                      (token "4c" SPINE-DATA 2 3))
                                (list (token "4c" SPINE-DATA 3 0)
                                      (token "4c" SPINE-DATA 3 1)
                                      (token "4c" SPINE-DATA 3 2)
                                      (token "4c" SPINE-DATA 3 3))
                                (list (token "4c" SPINE-DATA 4 0)
                                      (token "4c" SPINE-DATA 4 1)
                                      (token "4c" SPINE-DATA 4 2)
                                      (token "4c" SPINE-DATA 4 3))
                                (list (token "*" NULL-INTERPRETATION 5 0)
                                      (token "*" NULL-INTERPRETATION 5 1)
                                      (token "*v" SPINE-JOIN 5 2)
                                      (token "*v" SPINE-JOIN 5 3))
                                (list (token "*v" SPINE-JOIN 6 0)
                                      (token "*v" SPINE-JOIN 6 1)
                                      (token "*" NULL-INTERPRETATION 6 2))
                                (list (token "*-" SPINE-TERMINATOR 7 0)
                                      (token "*-" SPINE-TERMINATOR 7 1))))
              (list (record "**kern\t**kern" TOKEN
                            (list (token "**kern" EXCLUSIVE-INTERPRETATION 0 0)
                                  (token "**kern" EXCLUSIVE-INTERPRETATION 0 1))
                            0)
                    (record "*^\t*^" TOKEN
                            (list (token "*^" SPINE-SPLIT 1 0)
                                  (token "*^" SPINE-SPLIT 1 1))
                            1)
                    (record "4c\t4c\t4c\t4c" TOKEN
                            (list (token "4c" SPINE-DATA 2 0)
                                  (token "4c" SPINE-DATA 2 1)
                                  (token "4c" SPINE-DATA 2 2)
                                  (token "4c" SPINE-DATA 2 3))
                            2)
                    (record "4c\t4c\t4c\t4c" TOKEN
                            (list (token "4c" SPINE-DATA 3 0)
                                  (token "4c" SPINE-DATA 3 1)
                                  (token "4c" SPINE-DATA 3 2)
                                  (token "4c" SPINE-DATA 3 3))
                            3)
                    (record "4c\t4c\t4c\t4c" TOKEN
                            (list (token "4c" SPINE-DATA 4 0)
                                  (token "4c" SPINE-DATA 4 1)
                                  (token "4c" SPINE-DATA 4 2)
                                  (token "4c" SPINE-DATA 4 3))
                            4)
                    (record "*\t*\t*v\t*v" TOKEN
                            (list (token "*" NULL-INTERPRETATION 5 0)
                                  (token "*" NULL-INTERPRETATION 5 1)
                                  (token "*v" SPINE-JOIN 5 2)
                                  (token "*v" SPINE-JOIN 5 3))
                            5)
                    (record "*v\t*v\t*" TOKEN
                            (list (token "*v" SPINE-JOIN 6 0)
                                  (token "*v" SPINE-JOIN 6 1)
                                  (token "*" NULL-INTERPRETATION 6 2))
                            6)
                    (record "*-\t*-" TOKEN
                            (list (token "*-" SPINE-TERMINATOR 7 0)
                                  (token "*-" SPINE-TERMINATOR 7 1))
                            7)))
(check-expect (hgraph->lolot
               (hgraph (root (list (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0 0))
                                         (parent (token "*^" SPINE-SPLIT 1 0)
                                                 (list (leaf (token "4c" SPINE-DATA 2 0))
                                                       (leaf (token "4c" SPINE-DATA 3 0))
                                                       (leaf (token "4c" SPINE-DATA 4 0))
                                                       (leaf (token "*" NULL-INTERPRETATION 5 0))
                                                       (leaf (token "*v" SPINE-JOIN 6 0)))
                                                 (list (leaf (token "4c" SPINE-DATA 2 1))
                                                       (leaf (token "4c" SPINE-DATA 3 1))
                                                       (leaf (token "4c" SPINE-DATA 4 1))
                                                       (leaf (token "*" NULL-INTERPRETATION 5 1))
                                                       (leaf (token "*v" SPINE-JOIN 6 1))))
                                         (leaf (token "*-" SPINE-TERMINATOR 7 0)))
                                   (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0 0))
                                         (parent (token "*^" SPINE-SPLIT 1 1)
                                                 (list (leaf (token "4c" SPINE-DATA 2 2))
                                                       (leaf (token "4c" SPINE-DATA 3 2))
                                                       (leaf (token "4c" SPINE-DATA 4 2))
                                                       (leaf (token "*v" SPINE-JOIN 5 2)))
                                                 (list (leaf (token "4c" SPINE-DATA 2 3))
                                                       (leaf (token "4c" SPINE-DATA 3 3))
                                                       (leaf (token "4c" SPINE-DATA 4 3))
                                                       (leaf (token "*v" SPINE-JOIN 5 3))))
                                         (leaf (token "*" NULL-INTERPRETATION 6 2))
                                         (leaf (token "*-" SPINE-TERMINATOR 7 1)))))))
              (list (list (token "**kern" EXCLUSIVE-INTERPRETATION 0 0)
                          (token "**kern" EXCLUSIVE-INTERPRETATION 0 1))
                    (list (token "*^" SPINE-SPLIT 1 0)
                          (token "*^" SPINE-SPLIT 1 1))
                    (list (token "4c" SPINE-DATA 2 0)
                          (token "4c" SPINE-DATA 2 1)
                          (token "4c" SPINE-DATA 2 2)
                          (token "4c" SPINE-DATA 2 3))
                    (list (token "4c" SPINE-DATA 3 0)
                          (token "4c" SPINE-DATA 3 1)
                          (token "4c" SPINE-DATA 3 2)
                          (token "4c" SPINE-DATA 3 3))
                    (list (token "4c" SPINE-DATA 4 0)
                          (token "4c" SPINE-DATA 4 1)
                          (token "4c" SPINE-DATA 4 2)
                          (token "4c" SPINE-DATA 4 3))
                    (list (token "*" NULL-INTERPRETATION 5 0)
                          (token "*" NULL-INTERPRETATION 5 1)
                          (token "*v" SPINE-JOIN 5 2)
                          (token "*v" SPINE-JOIN 5 3))
                    (list (token "*v" SPINE-JOIN 6 0)
                          (token "*v" SPINE-JOIN 6 1)
                          (token "*" NULL-INTERPRETATION 6 2))
                    (list (token "*-" SPINE-TERMINATOR 7 0)
                          (token "*-" SPINE-TERMINATOR 7 1))))
(check-expect (hfile->hgraph (path->hfile "../../data/order/two-spines-split-simultaneously.krn"))
              (hgraph (root (list (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0 0))
                                        (parent (token "*^" SPINE-SPLIT 1 0)
                                                (list (leaf (token "4c" SPINE-DATA 2 0))
                                                      (leaf (token "4c" SPINE-DATA 3 0))
                                                      (leaf (token "4c" SPINE-DATA 4 0))
                                                      (leaf (token "*" NULL-INTERPRETATION 5 0))
                                                      (leaf (token "*v" SPINE-JOIN 6 0)))
                                                (list (leaf (token "4c" SPINE-DATA 2 1))
                                                      (leaf (token "4c" SPINE-DATA 3 1))
                                                      (leaf (token "4c" SPINE-DATA 4 1))
                                                      (leaf (token "*" NULL-INTERPRETATION 5 1))
                                                      (leaf (token "*v" SPINE-JOIN 6 1))))
                                        (leaf (token "*-" SPINE-TERMINATOR 7 0)))
                                  (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0 1))
                                        (parent (token "*^" SPINE-SPLIT 1 1)
                                                (list (leaf (token "4c" SPINE-DATA 2 2))
                                                      (leaf (token "4c" SPINE-DATA 3 2))
                                                      (leaf (token "4c" SPINE-DATA 4 2))
                                                      (leaf (token "*v" SPINE-JOIN 5 2)))
                                                (list (leaf (token "4c" SPINE-DATA 2 3))
                                                      (leaf (token "4c" SPINE-DATA 3 3))
                                                      (leaf (token "4c" SPINE-DATA 4 3))
                                                      (leaf (token "*v" SPINE-JOIN 5 3))))
                                        (leaf (token "*" NULL-INTERPRETATION 6 2))
                                        (leaf (token "*-" SPINE-TERMINATOR 7 1)))))))
; branch->lot for spine 0
(check-expect (branch->lot (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0 0))
                                 (parent (token "*^" SPINE-SPLIT 1 0)
                                         (list (leaf (token "4c" SPINE-DATA 2 0))
                                               (leaf (token "4c" SPINE-DATA 3 0))
                                               (leaf (token "4c" SPINE-DATA 4 0))
                                               (leaf (token "*" NULL-INTERPRETATION 5 0))
                                               (leaf (token "*v" SPINE-JOIN 6 0)))
                                         (list (leaf (token "4c" SPINE-DATA 2 1))
                                               (leaf (token "4c" SPINE-DATA 3 1))
                                               (leaf (token "4c" SPINE-DATA 4 1))
                                               (leaf (token "*" NULL-INTERPRETATION 5 1))
                                               (leaf (token "*v" SPINE-JOIN 6 1))))
                                 (leaf (token "*-" SPINE-TERMINATOR 7 0))))
              (list (token"**kern" EXCLUSIVE-INTERPRETATION 0 0)
                    (token "*^" SPINE-SPLIT 1 0)
                    (token "4c" SPINE-DATA 2 0)
                    (token "4c" SPINE-DATA 3 0)
                    (token "4c" SPINE-DATA 4 0)
                    (token "*" NULL-INTERPRETATION 5 0)
                    (token "*v" SPINE-JOIN 6 0)
                    (token "4c" SPINE-DATA 2 1)
                    (token "4c" SPINE-DATA 3 1)
                    (token "4c" SPINE-DATA 4 1)
                    (token "*" NULL-INTERPRETATION 5 1)
                    (token "*v" SPINE-JOIN 6 1)
                    (token "*-" SPINE-TERMINATOR 7 0)))
; branch->lot for spine 1
(check-expect (branch->lot (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0 1))
                                 (parent (token "*^" SPINE-SPLIT 1 1)
                                         (list (leaf (token "4c" SPINE-DATA 2 2))
                                               (leaf (token "4c" SPINE-DATA 3 2))
                                               (leaf (token "4c" SPINE-DATA 4 2))
                                               (leaf (token "*v" SPINE-JOIN 5 2)))
                                         (list (leaf (token "4c" SPINE-DATA 2 3))
                                               (leaf (token "4c" SPINE-DATA 3 3))
                                               (leaf (token "4c" SPINE-DATA 4 3))
                                               (leaf (token "*v" SPINE-JOIN 5 3))))
                                 (leaf (token "*" NULL-INTERPRETATION 6 2))
                                 (leaf (token "*-" SPINE-TERMINATOR 7 1))))
              (list (token"**kern" EXCLUSIVE-INTERPRETATION 0 1)
                    (token "*^" SPINE-SPLIT 1 1)
                    (token "4c" SPINE-DATA 2 2)
                    (token "4c" SPINE-DATA 3 2)
                    (token "4c" SPINE-DATA 4 2)
                    (token "*v" SPINE-JOIN 5 2)
                    (token "4c" SPINE-DATA 2 3)
                    (token "4c" SPINE-DATA 3 3)
                    (token "4c" SPINE-DATA 4 3)
                    (token "*v" SPINE-JOIN 5 3)
                    (token "*" NULL-INTERPRETATION 6 2)
                    (token "*-" SPINE-TERMINATOR 7 1)))
(check-expect (gspines->linked-spines (spine-parser (path->hfile "../../data/order/two-spines-split-simultaneously.krn"))
                                      (path->hfile "../../data/order/two-spines-split-simultaneously.krn"))
              (list (linked-spine KERN-0-0) (linked-spine KERN-0-1)))

(test)
