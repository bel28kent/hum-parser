#lang racket/base

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hum-parser: data structures: AbstractHumdrumGraph
;;    hfile->ab-hgraph: Converts HumdrumFile to AbstractHumdrumGraph
;;        or one of its subtypes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require racket/list
         racket/local
         test-engine/racket-tests
         "../../../parser/data-definitions/data-definitions.rkt"
         (only-in "../../../parser/functions/file.rkt"
                  path->hfile)
         (only-in "../../../parser/functions/predicates.rkt"
                  spine-split? spine-join? null-interpretation?)
         (only-in "../../../parser/functions/spine-parser.rkt"
                  spine-parser)
         "../data-definitions/data-definitions.rkt")

(provide hfile->ab-hgraph)

#|
    ASSUMPTIONS:
        1a. All subspines merge into one spine before termination.
        1b. All spines terminate correctly; i.e., the last two tokens in all
            spines are "==" and "*-".
        2. When a "*v" is encountered it immediately terminates the subspine.
           (Overlapping left and right subspines when there is more than one
           spine split creates too many corner cases.)
|#

; hfile->ab-hgraph
; HumdrumFile Type -> AbstractHumdrumGraph
; converts the HumdrumFile to an AbstractHumdrumGraph or one of its subtypes

(define (hfile->ab-hgraph hfile type)
  (local [(define spines (spine-parser hfile))

          (define (fn-for-logs logs)
            (cond [(empty? logs) empty]
                  [else
                    (cons (fn-for-global-spine (first logs))
                          (fn-for-logs (rest logs)))]))

          (define (fn-for-global-spine global-spine)
            (fn-for-lolot (global-spine-tokens global-spine)))

          (define (fn-for-lolot lolot)
            (local [(define original lolot)

                    (define (fn-for-lolot lolot parent? left? spine-num)
                      (local [(define first-token (if (not (empty? lolot))
                                                      (get-token
                                                        (first lolot)
                                                        spine-num)
                                                      empty))]
                        (cond [(empty? lolot) empty]
                              [(string=? "*^" (token-token first-token))
                                (local [(define left (fn-for-lolot (rest lolot)
                                                                   #t #t
                                                                   spine-num))

                                        (define right (fn-for-lolot
                                                        (rest lolot)
                                                        #t #f
                                                        (add1 spine-num)))]
                                  (list* (parent first-token
                                                 left
                                                 right)
                                         (fn-for-lolot (trim-original original
                                                                      left
                                                                      right)
                                                       #f #f
                                                       spine-num)))]
                              [(string=? "*v" (token-token first-token))
                               (list (leaf first-token))]
                              [left? (list* (leaf first-token)
                                            (fn-for-lolot (rest lolot)
                                                          #t #t
                                                          spine-num))]
                              [(and parent? (not left?))
                                (cond [(splits-to-left?
                                         (token-token first-token)
                                         (first lolot)
                                         spine-num)
                                       (list* (leaf first-token)
                                              (fn-for-lolot (rest lolot)
                                                            #t #f
                                                            (add1 spine-num)))]
                                      [else
                                        (list* (leaf first-token)
                                               (fn-for-lolot (rest lolot)
                                                             #t #f
                                                             spine-num))])]
                              [else
                                (list* (leaf first-token)
                                       (fn-for-lolot (rest lolot)
                                                     #f #f
                                                     spine-num))])))]
              (fn-for-lolot lolot #f #f 1)))]
    (type (root (fn-for-logs spines)))))

; get-token
; (listof Token) Natural -> Token
; produces the token at index
(check-error (get-token empty 1))

(define (get-token lot index)
  (local [(define original lot)

          (define (get-token lot index counter)
            (cond [(empty? lot) (error
                                  "Reached an empty list before finding token."
                                  original
                                  index
                                  counter)]
                  [else
                    (if (= index counter)
                        (first lot)
                        (get-token (rest lot)
                                   index
                                   (add1 counter)))]))]
    (get-token lot index 1)))

; splits-to-left?
; String (listof Token) Natural -> Boolean
; produces true if there is a spine split to the left of this token
(check-error (splits-to-left? "*"
                              (list (token "*" NULL-INTERPRETATION 10)
                                    (token "*" NULL-INTERPRETATION 10)
                                    (token "*clefG2" CLEF 10))
                              4))

(define (splits-to-left? first-token-str lot spine-num)
  (local [(define (splits-to-left? lot counter)
            (cond [(empty? lot) (error "Reached an empty list before getting to this spine."
                                       lot
                                       spine-num)]
                  [(= counter spine-num) #f]
                  [else
                    (if (spine-split? (token-token (first lot)))
                        #t
                        (splits-to-left? (rest lot)
                                         (add1 counter)))]))]
    (if (or (spine-split? first-token-str)
            (spine-join? first-token-str)
            (null-interpretation? first-token-str))
        (splits-to-left? lot 1)
        #f)))

; trim-original
; (listof Token) (listof Token) (listof Token) -> (listof Token)
; produces the original list of tokens with parent contents removed
(check-error (trim-original empty
                            (list (leaf (token "*-" SPINE-TERMINATOR 50)))
                            (list (leaf (token "*-" SPINE-TERMINATOR 50)))))

(define (trim-original original left right)
  (local [(define left-last-index (token-record-number
                                    (leaf-token
                                      (first (reverse left)))))

          (define right-last-index (token-record-number
                                     (leaf-token
                                       (first (reverse right)))))

          (define record-index (if (< left-last-index
                                      right-last-index)
                                   left-last-index
                                   right-last-index))

          (define (trim-original original)
            (cond [(empty? original)
                   (error
                     "Reached empty list before finding index.")]
                  [(= record-index (token-record-number
                                     (first (first original))))
                   (handle-join (rest original) left right)]
                  [else
                    (trim-original (rest original))]))]
    (trim-original original)))

; handle-join
; (listof Token) (listof Token) (listof Token) -> (listof Token)
; removes "*v" from original only if its pair has already been processed

(define (handle-join rest-original left right)
  (if (string=? "*v" (token-token (first (first rest-original))))
      (if (join-is-already-paired? (first (first rest-original))
                                   left
                                   right)
          (rest rest-original)
          rest-original)
      rest-original))

; join-is-already-paired?
; Token (listof Token) (listof Token) -> Boolean
; produces true if join can be found twice between left and right

(define (join-is-already-paired? join left right)
  (local [(define (counter lot)
            (cond [(empty? lot) 0]
                  [else
                    (if (equal? join (first lot))
                        (add1 (counter (rest lot)))
                        (counter (rest lot)))]))

          (define left-count (counter (branch->lot left)))

          (define right-count (counter (branch->lot right)))]
    (if (= 2 (+ left-count right-count))
        #t
        #f)))

; branch->lot
; (listof Node) -> (listof Token)
; collapses a branch of a tree to a (listof Token)

(define (branch->lot branch)
  (local [(define (branch->lot branch acc)
            (cond [(empty? branch) (reverse acc)]
                  [(leaf? (first branch))
                   (branch->lot (rest branch)
                                (cons (leaf-token (first branch))
                                      acc))]
                  [else
                   (branch->lot (append (parent-left (first branch))
                                        (parent-right (first branch))
                                        (rest branch))
                                (cons (parent-token (first branch))
                                      acc))]))]
    (branch->lot branch empty)))

(define one-spine-no-splits    "../../../tests/data-structures/data/one-spine-no-splits.krn")
(define one-spine-one-split    "../../../tests/data-structures/data/one-spine-one-split.krn")
(define one-spine-two-splits   "../../../tests/data-structures/data/one-spine-two-splits.krn")
(define two-spines-no-splits   "../../../tests/data-structures/data/two-spines-no-splits.krn")
(define two-spines-one-splits  "../../../tests/data-structures/data/two-spines-one-splits.krn")
(define two-spines-both-split  "../../../tests/data-structures/data/two-spines-both-split.krn")
(define three-spines-two-splits-not-consecutive
  "../../../tests/data-structures/data/three-spines-two-splits-not-consecutive.krn")
(define three-spines-two-splits-not-consecutive-2
  "../../../tests/data-structures/data/three-spines-two-splits-not-consecutive-2.krn")
(define four-cases             "../../../tests/data-structures/data/four-cases.krn")

(define one-spine-no-splits-hfile    (path->hfile one-spine-no-splits))
(define one-spine-one-split-hfile    (path->hfile one-spine-one-split))
(define one-spine-two-splits-hfile   (path->hfile one-spine-two-splits))
(define two-spines-no-splits-hfile   (path->hfile two-spines-no-splits))
(define two-spines-one-splits-hfile  (path->hfile two-spines-one-splits))
(define two-spines-both-split-hfile  (path->hfile two-spines-both-split))
(define three-spines-two-splits-not-consecutive-hfile
  (path->hfile three-spines-two-splits-not-consecutive))
(define three-spines-two-splits-not-consecutive-2-hfile
  (path->hfile three-spines-two-splits-not-consecutive-2))
(define four-cases-hfile             (path->hfile four-cases))

; hfile->ab-hgraph
(check-expect (hfile->ab-hgraph one-spine-no-splits-hfile ab-hgraph)
              (ab-hgraph
                (root
                  (list (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0))
                              (leaf (token "*clefG2" CLEF 1))
                              (leaf (token "*k[]" KEY-SIG 2))
                              (leaf (token "*a:" KEY-LABEL 3))
                              (leaf (token "*M1/4" TIME-SIG 4))
                              (leaf (token "4a" SPINE-DATA 5))
                              (leaf (token "=2" MEASURE 6))
                              (leaf (token "4b" SPINE-DATA 7))
                              (leaf (token "=3" MEASURE 8))
                              (leaf (token "4a" SPINE-DATA 9))
                              (leaf (token "==" MEASURE 10))
                              (leaf (token "*-" SPINE-TERMINATOR 11)))))))
(check-expect (hfile->ab-hgraph one-spine-one-split-hfile ab-hgraph)
              (ab-hgraph
                (root
                  (list (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0))
                              (leaf (token "*clefG2" CLEF 1))
                              (leaf (token "*k[]" KEY-SIG 2))
                              (leaf (token "*a:" KEY-LABEL 3))
                              (leaf (token "*M1/4" TIME-SIG 4))
                              (leaf (token "4a" SPINE-DATA 5))
                              (leaf (token "=2" MEASURE 6))
                              (parent (token "*^" SPINE-SPLIT 7)
                                      (list (leaf (token "4b" SPINE-DATA 8))
                                            (leaf (token "=3" MEASURE 9))
                                            (leaf (token "4a" SPINE-DATA 10))
                                            (leaf (token "*v" SPINE-JOIN 11)))
                                      (list (leaf (token "4bb" SPINE-DATA 8))
                                            (leaf (token "=3" MEASURE 9))
                                            (leaf (token "4aa" SPINE-DATA 10))
                                            (leaf (token "*v" SPINE-JOIN 11))))
                              (leaf (token "==" MEASURE 12))
                              (leaf (token "*-" SPINE-TERMINATOR 13)))))))
(check-expect (hfile->ab-hgraph one-spine-two-splits-hfile ab-hgraph)
  (ab-hgraph
    (root
      (list
        (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0))
              (leaf (token "*clefG2" CLEF 1))
              (leaf (token "*k[]" KEY-SIG 2))
              (leaf (token "*a:" KEY-LABEL 3))
              (leaf (token "*M1/4" TIME-SIG 4))
              (parent (token "*^" SPINE-SPLIT 5)
                      (list (leaf (token "4a" SPINE-DATA 6))
                            (leaf (token "=2" MEASURE 7))
                            (leaf (token "*" NULL-INTERPRETATION 8))
                            (leaf (token "4b" SPINE-DATA 9))
                            (leaf (token "=3" MEASURE 10))
                            (leaf (token "4a" SPINE-DATA 11))
                            (leaf (token "*" NULL-INTERPRETATION 12))
                            (leaf (token "*v" SPINE-JOIN 13)))
                      (list (leaf (token "4aa" SPINE-DATA 6))
                            (leaf (token "=2" MEASURE 7))
                            (parent (token "*^" SPINE-SPLIT 8)
                                    (list (leaf (token "4bb" SPINE-DATA 9))
                                          (leaf (token "=3" MEASURE 10))
                                          (leaf (token "4aa" SPINE-DATA 11))
                                          (leaf (token "*v" SPINE-JOIN 12)))
                                    (list (leaf (token "4bbb" SPINE-DATA 9))
                                          (leaf (token "=3" MEASURE 10))
                                          (leaf (token "4aaa" SPINE-DATA 11))
                                          (leaf (token "*v" SPINE-JOIN 12))))
                            (leaf (token "*v" SPINE-JOIN 13))))
              (leaf (token "==" MEASURE 14))
              (leaf (token "*-" SPINE-TERMINATOR 15)))))))
(check-expect (hfile->ab-hgraph two-spines-no-splits-hfile ab-hgraph)
              (ab-hgraph
                (root
                  (list
                    (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0))
                          (leaf (token "*clefG2" CLEF 1))
                          (leaf (token "*k[]" KEY-SIG 2))
                          (leaf (token "*a:" KEY-LABEL 3))
                          (leaf (token "*M1/4" TIME-SIG 4))
                          (leaf (token "4a" SPINE-DATA 5))
                          (leaf (token "=2" MEASURE 6))
                          (leaf (token "4b" SPINE-DATA 7))
                          (leaf (token "=3" MEASURE 8))
                          (leaf (token "4a" SPINE-DATA 9))
                          (leaf (token "==" MEASURE 10))
                          (leaf (token "*-" SPINE-TERMINATOR 11)))
                    (list (leaf (token "**dynam" EXCLUSIVE-INTERPRETATION 0))
                          (leaf (token "*" NULL-INTERPRETATION 1))
                          (leaf (token "*" NULL-INTERPRETATION 2))
                          (leaf (token "*" NULL-INTERPRETATION 3))
                          (leaf (token "*" NULL-INTERPRETATION 4))
                          (leaf (token "p" SPINE-DATA 5))
                          (leaf (token "=2" MEASURE 6))
                          (leaf (token "f" SPINE-DATA 7))
                          (leaf (token "=3" MEASURE 8))
                          (leaf (token "." NULL-SPINE-DATA 9))
                          (leaf (token "==" MEASURE 10))
                          (leaf (token "*-" SPINE-TERMINATOR 11)))))))
(check-expect (hfile->ab-hgraph two-spines-one-splits-hfile ab-hgraph)
              (ab-hgraph
                (root
                  (list
                    (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0))
                          (leaf (token "*clefG2" CLEF 1))
                          (leaf (token "*k[]" KEY-SIG 2))
                          (leaf (token "*a:" KEY-LABEL 3))
                          (leaf (token "*M1/4" TIME-SIG 4))
                          (leaf (token "4a" SPINE-DATA 5))
                          (leaf (token "=2" MEASURE 6))
                          (parent (token "*^" SPINE-SPLIT 7)
                                  (list (leaf (token "4b" SPINE-DATA 8))
                                        (leaf (token "=3" MEASURE 9))
                                        (leaf (token "4a" SPINE-DATA 10))
                                        (leaf (token "*v" SPINE-JOIN 11)))
                                  (list (leaf (token "4bb" SPINE-DATA 8))
                                        (leaf (token "=3" MEASURE 9))
                                        (leaf (token "4aa" SPINE-DATA 10))
                                        (leaf (token "*v" SPINE-JOIN 11))))
                          (leaf (token "==" MEASURE 12))
                          (leaf (token "*-" SPINE-TERMINATOR 13)))
                    (list (leaf (token "**dynam" EXCLUSIVE-INTERPRETATION 0))
                          (leaf (token "*" NULL-INTERPRETATION 1))
                          (leaf (token "*" NULL-INTERPRETATION 2))
                          (leaf (token "*" NULL-INTERPRETATION 3))
                          (leaf (token "*" NULL-INTERPRETATION 4))
                          (leaf (token "p" SPINE-DATA 5))
                          (leaf (token "=2" MEASURE 6))
                          (leaf (token "*" NULL-INTERPRETATION 7))
                          (leaf (token "f" SPINE-DATA 8))
                          (leaf (token "=3" MEASURE 9))
                          (leaf (token "." NULL-SPINE-DATA 10))
                          (leaf (token "*" NULL-INTERPRETATION 11))
                          (leaf (token "==" MEASURE 12))
                          (leaf (token "*-" SPINE-TERMINATOR 13)))))))
(check-expect (hfile->ab-hgraph two-spines-both-split-hfile ab-hgraph)
              (ab-hgraph
               (root
                 (list
                   (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0))
                         (leaf (token "*clefG2" CLEF 1))
                         (leaf (token "*k[]" KEY-SIG 2))
                         (leaf (token "*a:" KEY-LABEL 3))
                         (leaf (token "*M1/4" TIME-SIG 4))
                         (leaf (token "*" NULL-INTERPRETATION 5))
                         (leaf (token "4a" SPINE-DATA 6))
                         (leaf (token "=2" MEASURE 7))
                         (parent (token "*^" SPINE-SPLIT 8)
                                 (list (leaf (token "4b" SPINE-DATA 9))
                                       (leaf (token "=3" MEASURE 10))
                                       (leaf (token "4a" SPINE-DATA 11))
                                       (leaf (token "*" NULL-INTERPRETATION 12))
                                       (leaf (token "*v" SPINE-JOIN 13)))
                                 (list (leaf (token "4bb" SPINE-DATA 9))
                                       (leaf (token "=3" MEASURE 10))
                                       (leaf (token "4aa" SPINE-DATA 11))
                                       (leaf (token "*" NULL-INTERPRETATION 12))
                                       (leaf (token "*v" SPINE-JOIN 13))))
                         (leaf (token "==" MEASURE 14))
                         (leaf (token "*-" SPINE-TERMINATOR 15)))
                   (list (leaf (token "**dynam" EXCLUSIVE-INTERPRETATION 0))
                         (leaf (token "*" NULL-INTERPRETATION 1))
                         (leaf (token "*" NULL-INTERPRETATION 2))
                         (leaf (token "*" NULL-INTERPRETATION 3))
                         (leaf (token "*" NULL-INTERPRETATION 4))
                         (parent (token "*^" SPINE-SPLIT 5)
                                 (list (leaf (token "p" SPINE-DATA 6))
                                       (leaf (token "=2" MEASURE 7))
                                       (leaf (token "*" NULL-INTERPRETATION 8))
                                       (leaf (token "f" SPINE-DATA 9))
                                       (leaf (token "=3" MEASURE 10))
                                       (leaf (token "." NULL-SPINE-DATA 11))
                                       (leaf (token "*v" SPINE-JOIN 12)))
                                 (list (leaf (token "pp" SPINE-DATA 6))
                                       (leaf (token "=2" MEASURE 7))
                                       (leaf (token "*" NULL-INTERPRETATION 8))
                                       (leaf (token "ff" SPINE-DATA 9))
                                       (leaf (token "=3" MEASURE 10))
                                       (leaf (token "ff" SPINE-DATA 11))
                                       (leaf (token "*v" SPINE-JOIN 12))))
                         (leaf (token "*" NULL-INTERPRETATION 13))
                         (leaf (token "==" MEASURE 14))
                         (leaf (token "*-" SPINE-TERMINATOR 15)))))))
(check-expect (hfile->ab-hgraph three-spines-two-splits-not-consecutive-hfile
                                ab-hgraph)
(ab-hgraph
  (root
    (list
      (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0))
            (leaf (token "*staff2" STAFF-NUMBER 1))
            (leaf (token "*Ipiano" INSTRUMENT-CLASS 2))
            (leaf (token "*clefF4" CLEF 3))
            (leaf (token "*k[]" KEY-SIG 4))
            (leaf (token "*a:" KEY-LABEL 5))
            (leaf (token "*M3/4" TIME-SIG 6))
            (leaf (token "=33" MEASURE 7))
            (parent (token "*^" SPINE-SPLIT 8)
                    (list (leaf (token "4E" SPINE-DATA 9))
                          (leaf (token "." NULL-SPINE-DATA 10))
                          (leaf (token "4D" SPINE-DATA 11))
                          (leaf (token "." NULL-SPINE-DATA 12))
                          (leaf (token "[4C#X" SPINE-DATA 13))
                          (leaf (token "." NULL-SPINE-DATA 14))
                          (leaf (token "=34" MEASURE 15))
                          (leaf (token "2.C#] 2.B]" SPINE-DATA 16))
                          (leaf (token "." NULL-SPINE-DATA 17))
                          (leaf (token "." NULL-SPINE-DATA 18))
                          (leaf (token "." NULL-SPINE-DATA 19))
                          (leaf (token "." NULL-SPINE-DATA 20))
                          (leaf (token "." NULL-SPINE-DATA 21))
                          (leaf (token "=35" MEASURE 22))
                          (leaf (token "*" NULL-INTERPRETATION 23))
                          (leaf (token "4E" SPINE-DATA 24))
                          (leaf (token "4D" SPINE-DATA 25))
                          (leaf (token "." NULL-SPINE-DATA 26))
                          (leaf (token "[4C#X" SPINE-DATA 27))
                          (leaf (token "." NULL-SPINE-DATA 28))
                          (leaf (token "=36" MEASURE 29))
                          (leaf (token "2.C#] 2.B]" SPINE-DATA 30))
                          (leaf (token "." NULL-SPINE-DATA 31))
                          (leaf (token "." NULL-SPINE-DATA 32))
                          (leaf (token "." NULL-SPINE-DATA 33))
                          (leaf (token "." NULL-SPINE-DATA 34))
                          (leaf (token "*" NULL-INTERPRETATION 35))
                          (leaf (token "=37" MEASURE 36))
                          (parent (token "*^" SPINE-SPLIT 37)
                                  (list
                                    (leaf (token "2.D\\" SPINE-DATA 38))
                                    (leaf (token "." NULL-SPINE-DATA 39))
                                    (leaf (token "." NULL-SPINE-DATA 40))
                                    (leaf (token "." NULL-SPINE-DATA 41))
                                    (leaf (token "." NULL-SPINE-DATA 42))
                                    (leaf (token "=38" MEASURE 43))
                                    (leaf (token "2.D\\" SPINE-DATA 44))
                                    (leaf (token "." NULL-SPINE-DATA 45))
                                    (leaf (token "." NULL-SPINE-DATA 46))
                                    (leaf (token "." NULL-SPINE-DATA 47))
                                    (leaf (token "." NULL-SPINE-DATA 48))
                                    (leaf (token "*" NULL-INTERPRETATION 49))
                                    (leaf (token "*v" SPINE-JOIN 50)))
                                  (list (leaf (token "2B" SPINE-DATA 38))
                                        (leaf (token "." NULL-SPINE-DATA 39))
                                        (leaf (token "." NULL-SPINE-DATA 40))
                                        (leaf (token "." NULL-SPINE-DATA 41))
                                        (leaf (token "4B-X" SPINE-DATA 42))
                                        (leaf (token "=38" MEASURE 43))
                                        (leaf (token "4A" SPINE-DATA 44))
                                        (leaf (token "." NULL-SPINE-DATA 45))
                                        (leaf (token "2c" SPINE-DATA 46))
                                        (leaf (token "." NULL-SPINE-DATA 47))
                                        (leaf (token "." NULL-SPINE-DATA 48))
                                        (leaf (token "*v" SPINE-JOIN 49))))
                          (leaf (token "*v" SPINE-JOIN 50)))
                    (list (leaf (token "[2.B" SPINE-DATA 9))
                          (leaf (token "." NULL-SPINE-DATA 10))
                          (leaf (token "." NULL-SPINE-DATA 11))
                          (leaf (token "." NULL-SPINE-DATA 12))
                          (leaf (token "." NULL-SPINE-DATA 13))
                          (leaf (token "." NULL-SPINE-DATA 14))
                          (leaf (token "=34" MEASURE 15))
                          (leaf (token "4g" SPINE-DATA 16))
                          (leaf (token "." NULL-SPINE-DATA 17))
                          (leaf (token "4e" SPINE-DATA 18))
                          (leaf (token "." NULL-SPINE-DATA 19))
                          (leaf (token "4r" SPINE-DATA 20))
                          (leaf (token "." NULL-SPINE-DATA 21))
                          (leaf (token "=35" MEASURE 22))
                          (leaf (token "*" NULL-INTERPRETATION 23))
                          (leaf (token "4r" SPINE-DATA 24))
                          (leaf (token "8r" SPINE-DATA 25))
                          (leaf (token "8G" SPINE-DATA 26))
                          (leaf (token "8A#XL" SPINE-DATA 27))
                          (leaf (token "[8BJ" SPINE-DATA 28))
                          (leaf (token "=36" MEASURE 29))
                          (leaf (token "4.g" SPINE-DATA 30))
                          (leaf (token "." NULL-SPINE-DATA 31))
                          (leaf (token "8f#X" SPINE-DATA 32))
                          (leaf (token "8f#L" SPINE-DATA 33))
                          (leaf (token "8eJ" SPINE-DATA 34))
                          (leaf (token "*" NULL-INTERPRETATION 35))
                          (leaf (token "=37" MEASURE 36))
                          (leaf (token "*" NULL-INTERPRETATION 37))
                          (leaf (token "4d" SPINE-DATA 38))
                          (leaf (token "." NULL-SPINE-DATA 39))
                          (leaf (token "[2g" SPINE-DATA 40))
                          (leaf (token "." NULL-SPINE-DATA 41))
                          (leaf (token "." NULL-SPINE-DATA 42))
                          (leaf (token "=38" MEASURE 43))
                          (leaf (token "4g]" SPINE-DATA 44))
                          (leaf (token "." NULL-SPINE-DATA 45))
                          (leaf (token "4g" SPINE-DATA 46))
                          (leaf (token "." NULL-SPINE-DATA 47))
                          (leaf (token "4f#X" SPINE-DATA 48))
                          (leaf (token "*v" SPINE-JOIN 49))))
            (leaf (token "==" MEASURE 51))
            (leaf (token "*-" SPINE-TERMINATOR 52)))
      (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0))
            (leaf (token "*staff1" STAFF-NUMBER 1))
            (leaf (token "*Ipiano" INSTRUMENT-CLASS 2))
            (leaf (token "*clefG2" CLEF 3))
            (leaf (token "*k[]" KEY-SIG 4))
            (leaf (token "*a:" KEY-LABEL 5))
            (leaf (token "*M3/4" TIME-SIG 6))
            (leaf (token "=33" MEASURE 7))
            (leaf (token "*" NULL-INTERPRETATION 8))
            (leaf (token "8r" SPINE-DATA 9))
            (leaf (token "8f#XL" SPINE-DATA 10))
            (leaf (token "8a" SPINE-DATA 11))
            (leaf (token "8g" SPINE-DATA 12))
            (leaf (token "8b" SPINE-DATA 13))
            (leaf (token "8eeJ" SPINE-DATA 14))
            (leaf (token "=34" MEASURE 15))
            (leaf (token "8ccc#XL" SPINE-DATA 16))
            (leaf (token "8bbJ" SPINE-DATA 17))
            (leaf (token "8r" SPINE-DATA 18))
            (leaf (token "8ff#X" SPINE-DATA 19))
            (leaf (token "8aaL" SPINE-DATA 20))
            (leaf (token "8ggJ" SPINE-DATA 21))
            (leaf (token "=35" MEASURE 22))
            (parent (token "*^" SPINE-SPLIT 23)
                    (list (leaf (token "2.g" SPINE-DATA 24))
                          (leaf (token "." NULL-SPINE-DATA 25))
                          (leaf (token "." NULL-SPINE-DATA 26))
                          (leaf (token "." NULL-SPINE-DATA 27))
                          (leaf (token "." NULL-SPINE-DATA 28))
                          (leaf (token "=36" MEASURE 29))
                          (leaf (token "2.b" SPINE-DATA 30))
                          (leaf (token "." NULL-SPINE-DATA 31))
                          (leaf (token "." NULL-SPINE-DATA 32))
                          (leaf (token "." NULL-SPINE-DATA 33))
                          (leaf (token "." NULL-SPINE-DATA 34))
                          (leaf (token "*v" SPINE-JOIN 35)))
                    (list (leaf (token "2ff#X" SPINE-DATA 24))
                          (leaf (token "." NULL-SPINE-DATA 25))
                          (leaf (token "." NULL-SPINE-DATA 26))
                          (leaf (token "4ee" SPINE-DATA 27))
                          (leaf (token "." NULL-SPINE-DATA 28))
                          (leaf (token "=36" MEASURE 29))
                          (leaf (token "4dd#X" SPINE-DATA 30))
                          (leaf (token "4ee" SPINE-DATA 31))
                          (leaf (token "." NULL-SPINE-DATA 32))
                          (leaf (token "4gg" SPINE-DATA 33))
                          (leaf (token "." NULL-SPINE-DATA 34))
                          (leaf (token "*v" SPINE-JOIN 35))))
            (leaf (token "=37" MEASURE 36))
            (leaf (token "*" NULL-INTERPRETATION 37))
            (leaf (token "8ff#XL" SPINE-DATA 38))
            (leaf (token "8aa" SPINE-DATA 39))
            (leaf (token "8gg" SPINE-DATA 40))
            (leaf (token "8ddJ" SPINE-DATA 41))
            (leaf (token "[4dd#X" SPINE-DATA 42))
            (leaf (token "=38" MEASURE 43))
            (leaf (token "8dd#L]" SPINE-DATA 44))
            (leaf (token "8ff#X" SPINE-DATA 45))
            (leaf (token "8ee" SPINE-DATA 46))
            (leaf (token "8aJ" SPINE-DATA 47))
            (leaf (token "[4b" SPINE-DATA 48))
            (leaf (token "*" NULL-INTERPRETATION 49))
            (leaf (token "*" NULL-INTERPRETATION 50))
            (leaf (token "==" MEASURE 51))
            (leaf (token "*-" SPINE-TERMINATOR 52)))
      (list (leaf (token "**dynam" EXCLUSIVE-INTERPRETATION 0))
            (leaf (token "*staff1/2" STAFF-NUMBER 1))
            (leaf (token "*" NULL-INTERPRETATION 2))
            (leaf (token "*" NULL-INTERPRETATION 3))
            (leaf (token "*" NULL-INTERPRETATION 4))
            (leaf (token "*" NULL-INTERPRETATION 5))
            (leaf (token "*" NULL-INTERPRETATION 6))
            (leaf (token "=33" MEASURE 7))
            (leaf (token "*" NULL-INTERPRETATION 8))
            (leaf (token "." NULL-SPINE-DATA 9))
            (leaf (token "." NULL-SPINE-DATA 10))
            (leaf (token "<" SPINE-DATA 11))
            (leaf (token "(" SPINE-DATA 12))
            (leaf (token "(" SPINE-DATA 13))
            (leaf (token "[" SPINE-DATA 14))
            (leaf (token "=34" MEASURE 15))
            (leaf (token ">" SPINE-DATA 16))
            (leaf (token ")" SPINE-DATA 17))
            (leaf (token "]" SPINE-DATA 18))
            (leaf (token "<" SPINE-DATA 19))
            (leaf (token "(" SPINE-DATA 20))
            (leaf (token "[" SPINE-DATA 21))
            (leaf (token "=35" MEASURE 22))
            (leaf (token "*" NULL-INTERPRETATION 23))
            (leaf (token ">" SPINE-DATA 24))
            (leaf (token ")" SPINE-DATA 25))
            (leaf (token ")" SPINE-DATA 26))
            (leaf (token ")" SPINE-DATA 27))
            (leaf (token "]" SPINE-DATA 28))
            (leaf (token "=36" MEASURE 29))
            (leaf (token "." NULL-SPINE-DATA 30))
            (leaf (token "." NULL-SPINE-DATA 31))
            (leaf (token "." NULL-SPINE-DATA 32))
            (leaf (token "." NULL-SPINE-DATA 33))
            (leaf (token "." NULL-SPINE-DATA 34))
            (leaf (token "*" NULL-INTERPRETATION 35))
            (leaf (token "=37" MEASURE 36))
            (leaf (token "*" NULL-INTERPRETATION 37))
            (leaf (token "." NULL-SPINE-DATA 38))
            (leaf (token "." NULL-SPINE-DATA 39))
            (leaf (token "." NULL-SPINE-DATA 40))
            (leaf (token "." NULL-SPINE-DATA 41))
            (leaf (token "." NULL-SPINE-DATA 42))
            (leaf (token "=38" MEASURE 43))
            (leaf (token "." NULL-SPINE-DATA 44))
            (leaf (token "." NULL-SPINE-DATA 45))
            (leaf (token "." NULL-SPINE-DATA 46))
            (leaf (token "." NULL-SPINE-DATA 47))
            (leaf (token "." NULL-SPINE-DATA 48))
            (leaf (token "*" NULL-INTERPRETATION 49))
            (leaf (token "*" NULL-INTERPRETATION 50))
            (leaf (token "==" MEASURE 51))
            (leaf (token "*-" SPINE-TERMINATOR 52)))))))
(check-expect (hfile->ab-hgraph three-spines-two-splits-not-consecutive-2-hfile
                                ab-hgraph)
  (ab-hgraph
    (root
      (list
        (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0))
              (leaf (token "*staff2" STAFF-NUMBER 1))
              (leaf (token "*Ipiano" INSTRUMENT-CLASS 2))
              (leaf (token "*clefF4" CLEF 3))
              (leaf (token "*k[]" KEY-SIG 4))
              (leaf (token "*a:" KEY-LABEL 5))
              (leaf (token "*M3/4" TIME-SIG 6))
              (leaf (token "=33" MEASURE 7))
              (parent (token "*^" SPINE-SPLIT 8)
                      (list (leaf (token "4E" SPINE-DATA 9))
                            (leaf (token "." NULL-SPINE-DATA 10))
                            (leaf (token "4D" SPINE-DATA 11))
                            (leaf (token "." NULL-SPINE-DATA 12))
                            (leaf (token "[4C#X" SPINE-DATA 13))
                            (leaf (token "." NULL-SPINE-DATA 14))
                            (leaf (token "=34" MEASURE 15))
                            (leaf (token "2.C#] 2.B]" SPINE-DATA 16))
                            (leaf (token "." NULL-SPINE-DATA 17))
                            (leaf (token "." NULL-SPINE-DATA 18))
                            (leaf (token "." NULL-SPINE-DATA 19))
                            (leaf (token "." NULL-SPINE-DATA 20))
                            (leaf (token "." NULL-SPINE-DATA 21))
                            (leaf (token "=35" MEASURE 22))
                            (leaf (token "*" NULL-INTERPRETATION 23))
                            (leaf (token "4E" SPINE-DATA 24))
                            (leaf (token "4D" SPINE-DATA 25))
                            (leaf (token "." NULL-SPINE-DATA 26))
                            (leaf (token "[4C#X" SPINE-DATA 27))
                            (leaf (token "." NULL-SPINE-DATA 28))
                            (leaf (token "=36" MEASURE 29))
                            (leaf (token "2.C#] 2.B]" SPINE-DATA 30))
                            (leaf (token "." NULL-SPINE-DATA 31))
                            (leaf (token "." NULL-SPINE-DATA 32))
                            (leaf (token "." NULL-SPINE-DATA 33))
                            (leaf (token "." NULL-SPINE-DATA 34))
                            (leaf (token "*" NULL-INTERPRETATION 35))
                            (leaf (token "=37" MEASURE 36))
                            (leaf (token "*" NULL-INTERPRETATION 37))
                            (leaf (token "2.D\\" SPINE-DATA 38))
                            (leaf (token "." NULL-SPINE-DATA 39))
                            (leaf (token "." NULL-SPINE-DATA 40))
                            (leaf (token "." NULL-SPINE-DATA 41))
                            (leaf (token "." NULL-SPINE-DATA 42))
                            (leaf (token "=38" MEASURE 43))
                            (leaf (token "2.D\\" SPINE-DATA 44))
                            (leaf (token "." NULL-SPINE-DATA 45))
                            (leaf (token "." NULL-SPINE-DATA 46))
                            (leaf (token "." NULL-SPINE-DATA 47))
                            (leaf (token "." NULL-SPINE-DATA 48))
                            (leaf (token "*" NULL-INTERPRETATION 49))
                            (leaf (token "*v" SPINE-JOIN 50)))
                      (list (leaf (token "[2.B" SPINE-DATA 9))
                            (leaf (token "." NULL-SPINE-DATA 10))
                            (leaf (token "." NULL-SPINE-DATA 11))
                            (leaf (token "." NULL-SPINE-DATA 12))
                            (leaf (token "." NULL-SPINE-DATA 13))
                            (leaf (token "." NULL-SPINE-DATA 14))
                            (leaf (token "=34" MEASURE 15))
                            (leaf (token "4g" SPINE-DATA 16))
                            (leaf (token "." NULL-SPINE-DATA 17))
                            (leaf (token "4e" SPINE-DATA 18))
                            (leaf (token "." NULL-SPINE-DATA 19))
                            (leaf (token "4r" SPINE-DATA 20))
                            (leaf (token "." NULL-SPINE-DATA 21))
                            (leaf (token "=35" MEASURE 22))
                            (leaf (token "*" NULL-INTERPRETATION 23))
                            (leaf (token "4r" SPINE-DATA 24))
                            (leaf (token "8r" SPINE-DATA 25))
                            (leaf (token "8G" SPINE-DATA 26))
                            (leaf (token "8A#XL" SPINE-DATA 27))
                            (leaf (token "[8BJ" SPINE-DATA 28))
                            (leaf (token "=36" MEASURE 29))
                            (leaf (token "4.g" SPINE-DATA 30))
                            (leaf (token "." NULL-SPINE-DATA 31))
                            (leaf (token "8f#X" SPINE-DATA 32))
                            (leaf (token "8f#L" SPINE-DATA 33))
                            (leaf (token "8eJ" SPINE-DATA 34))
                            (leaf (token "*" NULL-INTERPRETATION 35))
                            (leaf (token "=37" MEASURE 36))
                            (parent (token "*^" SPINE-SPLIT 37)
                                    (list (leaf (token "2B" SPINE-DATA 38))
                                          (leaf (token "." NULL-SPINE-DATA 39))
                                          (leaf (token "." NULL-SPINE-DATA 40))
                                          (leaf (token "." NULL-SPINE-DATA 41))
                                          (leaf (token "4B-X" SPINE-DATA 42))
                                          (leaf (token "=38" MEASURE 43))
                                          (leaf (token "4A" SPINE-DATA 44))
                                          (leaf (token "." NULL-SPINE-DATA 45))
                                          (leaf (token "2c" SPINE-DATA 46))
                                          (leaf (token "." NULL-SPINE-DATA 47))
                                          (leaf (token "." NULL-SPINE-DATA 48))
                                          (leaf (token "*v" SPINE-JOIN 49)))
                                    (list (leaf (token "4d" SPINE-DATA 38))
                                          (leaf (token "." NULL-SPINE-DATA 39))
                                          (leaf (token "[2g" SPINE-DATA 40))
                                          (leaf (token "." NULL-SPINE-DATA 41))
                                          (leaf (token "." NULL-SPINE-DATA 42))
                                          (leaf (token "=38" MEASURE 43))
                                          (leaf (token "4g]" SPINE-DATA 44))
                                          (leaf (token "." NULL-SPINE-DATA 45))
                                          (leaf (token "4g" SPINE-DATA 46))
                                          (leaf (token "." NULL-SPINE-DATA 47))
                                          (leaf (token "4f#X" SPINE-DATA 48))
                                          (leaf (token "*v" SPINE-JOIN 49))))
                            (leaf (token "*v" SPINE-JOIN 50))))
              (leaf (token "==" MEASURE 51))
              (leaf (token "*-" SPINE-TERMINATOR 52)))
        (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0))
              (leaf (token "*staff1" STAFF-NUMBER 1))
              (leaf (token "*Ipiano" INSTRUMENT-CLASS 2))
              (leaf (token "*clefG2" CLEF 3))
              (leaf (token "*k[]" KEY-SIG 4))
              (leaf (token "*a:" KEY-LABEL 5))
              (leaf (token "*M3/4" TIME-SIG 6))
              (leaf (token "=33" MEASURE 7))
              (leaf (token "*" NULL-INTERPRETATION 8))
              (leaf (token "8r" SPINE-DATA 9))
              (leaf (token "8f#XL" SPINE-DATA 10))
              (leaf (token "8a" SPINE-DATA 11))
              (leaf (token "8g" SPINE-DATA 12))
              (leaf (token "8b" SPINE-DATA 13))
              (leaf (token "8eeJ" SPINE-DATA 14))
              (leaf (token "=34" MEASURE 15))
              (leaf (token "8ccc#XL" SPINE-DATA 16))
              (leaf (token "8bbJ" SPINE-DATA 17))
              (leaf (token "8r" SPINE-DATA 18))
              (leaf (token "8ff#X" SPINE-DATA 19))
              (leaf (token "8aaL" SPINE-DATA 20))
              (leaf (token "8ggJ" SPINE-DATA 21))
              (leaf (token "=35" MEASURE 22))
              (parent (token "*^" SPINE-SPLIT 23)
                      (list (leaf (token "2.g" SPINE-DATA 24))
                            (leaf (token "." NULL-SPINE-DATA 25))
                            (leaf (token "." NULL-SPINE-DATA 26))
                            (leaf (token "." NULL-SPINE-DATA 27))
                            (leaf (token "." NULL-SPINE-DATA 28))
                            (leaf (token "=36" MEASURE 29))
                            (leaf (token "2.b" SPINE-DATA 30))
                            (leaf (token "." NULL-SPINE-DATA 31))
                            (leaf (token "." NULL-SPINE-DATA 32))
                            (leaf (token "." NULL-SPINE-DATA 33))
                            (leaf (token "." NULL-SPINE-DATA 34))
                            (leaf (token "*v" SPINE-JOIN 35)))
                      (list (leaf (token "2ff#X" SPINE-DATA 24))
                            (leaf (token "." NULL-SPINE-DATA 25))
                            (leaf (token "." NULL-SPINE-DATA 26))
                            (leaf (token "4ee" SPINE-DATA 27))
                            (leaf (token "." NULL-SPINE-DATA 28))
                            (leaf (token "=36" MEASURE 29))
                            (leaf (token "4dd#X" SPINE-DATA 30))
                            (leaf (token "4ee" SPINE-DATA 31))
                            (leaf (token "." NULL-SPINE-DATA 32))
                            (leaf (token "4gg" SPINE-DATA 33))
                            (leaf (token "." NULL-SPINE-DATA 34))
                            (leaf (token "*v" SPINE-JOIN 35))))
              (leaf (token "=37" MEASURE 36))
              (leaf (token "*" NULL-INTERPRETATION 37))
              (leaf (token "8ff#XL" SPINE-DATA 38))
              (leaf (token "8aa" SPINE-DATA 39))
              (leaf (token "8gg" SPINE-DATA 40))
              (leaf (token "8ddJ" SPINE-DATA 41))
              (leaf (token "[4dd#X" SPINE-DATA 42))
              (leaf (token "=38" MEASURE 43))
              (leaf (token "8dd#L]" SPINE-DATA 44))
              (leaf (token "8ff#X" SPINE-DATA 45))
              (leaf (token "8ee" SPINE-DATA 46))
              (leaf (token "8aJ" SPINE-DATA 47))
              (leaf (token "[4b" SPINE-DATA 48))
              (leaf (token "*" NULL-INTERPRETATION 49))
              (leaf (token "*" NULL-INTERPRETATION 50))
              (leaf (token "==" MEASURE 51))
              (leaf (token "*-" SPINE-TERMINATOR 52)))
        (list (leaf (token "**dynam" EXCLUSIVE-INTERPRETATION 0))
              (leaf (token "*staff1/2" STAFF-NUMBER 1))
              (leaf (token "*" NULL-INTERPRETATION 2))
              (leaf (token "*" NULL-INTERPRETATION 3))
              (leaf (token "*" NULL-INTERPRETATION 4))
              (leaf (token "*" NULL-INTERPRETATION 5))
              (leaf (token "*" NULL-INTERPRETATION 6))
              (leaf (token "=33" MEASURE 7))
              (leaf (token "*" NULL-INTERPRETATION 8))
              (leaf (token "." NULL-SPINE-DATA 9))
              (leaf (token "." NULL-SPINE-DATA 10))
              (leaf (token "<" SPINE-DATA 11))
              (leaf (token "(" SPINE-DATA 12))
              (leaf (token "(" SPINE-DATA 13))
              (leaf (token "[" SPINE-DATA 14))
              (leaf (token "=34" MEASURE 15))
              (leaf (token ">" SPINE-DATA 16))
              (leaf (token ")" SPINE-DATA 17))
              (leaf (token "]" SPINE-DATA 18))
              (leaf (token "<" SPINE-DATA 19))
              (leaf (token "(" SPINE-DATA 20))
              (leaf (token "[" SPINE-DATA 21))
              (leaf (token "=35" MEASURE 22))
              (leaf (token "*" NULL-INTERPRETATION 23))
              (leaf (token ">" SPINE-DATA 24))
              (leaf (token ")" SPINE-DATA 25))
              (leaf (token ")" SPINE-DATA 26))
              (leaf (token ")" SPINE-DATA 27))
              (leaf (token "]" SPINE-DATA 28))
              (leaf (token "=36" MEASURE 29))
              (leaf (token "." NULL-SPINE-DATA 30))
              (leaf (token "." NULL-SPINE-DATA 31))
              (leaf (token "." NULL-SPINE-DATA 32))
              (leaf (token "." NULL-SPINE-DATA 33))
              (leaf (token "." NULL-SPINE-DATA 34))
              (leaf (token "*" NULL-INTERPRETATION 35))
              (leaf (token "=37" MEASURE 36))
              (leaf (token "*" NULL-INTERPRETATION 37))
              (leaf (token "." NULL-SPINE-DATA 38))
              (leaf (token "." NULL-SPINE-DATA 39))
              (leaf (token "." NULL-SPINE-DATA 40))
              (leaf (token "." NULL-SPINE-DATA 41))
              (leaf (token "." NULL-SPINE-DATA 42))
              (leaf (token "=38" MEASURE 43))
              (leaf (token "." NULL-SPINE-DATA 44))
              (leaf (token "." NULL-SPINE-DATA 45))
              (leaf (token "." NULL-SPINE-DATA 46))
              (leaf (token "." NULL-SPINE-DATA 47))
              (leaf (token "." NULL-SPINE-DATA 48))
              (leaf (token "*" NULL-INTERPRETATION 49))
              (leaf (token "*" NULL-INTERPRETATION 50))
              (leaf (token "==" MEASURE 51))
              (leaf (token "*-" SPINE-TERMINATOR 52)))))))
(check-expect (hfile->ab-hgraph four-cases-hfile ab-hgraph)
  (ab-hgraph
    (root
      (list
        (list (leaf (token "**kern" EXCLUSIVE-INTERPRETATION 0))
              (parent (token "*^" SPINE-SPLIT 1)
                      (list (leaf (token "*" NULL-INTERPRETATION 2))
                            (leaf (token "4a" SPINE-DATA 3))
                            (leaf (token "*" NULL-INTERPRETATION 4))
                            (leaf (token "*v" SPINE-JOIN 5)))
                      (list (parent (token "*^" SPINE-SPLIT 2)
                                    (list (leaf (token "4aa" SPINE-DATA 3))
                                          (leaf (token "*v" SPINE-JOIN 4)))
                                    (list (leaf (token "4aaa" SPINE-DATA 3))
                                          (leaf (token "*v" SPINE-JOIN 4))))
                            (leaf (token "*v" SPINE-JOIN 5))))
              (leaf (token "4a" SPINE-DATA 6))
              (parent (token "*^" SPINE-SPLIT 7)
                      (list (leaf (token "*" NULL-INTERPRETATION 8))
                            (leaf (token "4a" SPINE-DATA 9))
                            (leaf (token "*" NULL-INTERPRETATION 10))
                            (leaf (token "4a" SPINE-DATA 11))
                            (leaf (token "*v" SPINE-JOIN 12)))
                      (list (parent (token "*^" SPINE-SPLIT 8)
                                    (list (leaf (token "4aa" SPINE-DATA 9))
                                          (leaf (token "*v" SPINE-JOIN 10)))
                                    (list (leaf (token "4aaa" SPINE-DATA 9))
                                          (leaf (token "*v" SPINE-JOIN 10))))
                            (leaf (token "4aa" SPINE-DATA 11))
                            (leaf (token "*v" SPINE-JOIN 12))))
              (leaf (token "4a" SPINE-DATA 13))
              (parent (token "*^" SPINE-SPLIT 14)
                      (list (leaf (token "4a" SPINE-DATA 15))
                            (leaf (token "*" NULL-INTERPRETATION 16))
                            (leaf (token "4a" SPINE-DATA 17))
                            (leaf (token "*" NULL-INTERPRETATION 18))
                            (leaf (token "4a" SPINE-DATA 19))
                            (leaf (token "*v" SPINE-JOIN 20)))
                      (list (leaf (token "4aa" SPINE-DATA 15))
                            (parent (token "*^" SPINE-SPLIT 16)
                                    (list (leaf (token "4aa" SPINE-DATA 17))
                                          (leaf (token "*v" SPINE-JOIN 18)))
                                    (list (leaf (token "4aaa" SPINE-DATA 17))
                                          (leaf (token "*v" SPINE-JOIN 18))))
                            (leaf (token "4aa" SPINE-DATA 19))
                            (leaf (token "*v" SPINE-JOIN 20))))
              (leaf (token "4a" SPINE-DATA 21))
              (parent (token "*^" SPINE-SPLIT 22)
                      (list (leaf (token "4a" SPINE-DATA 23))
                            (leaf (token "*" NULL-INTERPRETATION 24))
                            (leaf (token "4a" SPINE-DATA 25))
                            (leaf (token "*" NULL-INTERPRETATION 26))
                            (leaf (token "*v" SPINE-JOIN 27)))
                      (list (leaf (token "4aa" SPINE-DATA 23))
                            (parent (token "*^" SPINE-SPLIT 24)
                                    (list (leaf (token "4aa" SPINE-DATA 25))
                                          (leaf (token "*v" SPINE-JOIN 26)))
                                    (list (leaf (token "4aaa" SPINE-DATA 25))
                                          (leaf (token "*v" SPINE-JOIN 26))))
                            (leaf (token "*v" SPINE-JOIN 27))))
              (leaf (token "4a" SPINE-DATA 28))
              (leaf (token "==" MEASURE 29))
              (leaf (token "*-" SPINE-TERMINATOR 30)))))))

(test)
